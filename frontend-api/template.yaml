AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'


Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  QueryLimit:
    Type: Number
    Default: 20
    Description: Maximum number of items to return from a single query
  RetentionInDays:
    Type: Number
    Default: 30
    Description: Retention in days for CloudWatch log groups
  ProductsTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Products Table Name
  UserPoolId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Cognito User Pool ID


Resources:
  ###############
  # GRAPHQL API #
  ###############
  Api:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "ecommerce-${Environment}-frontend-api"
      AuthenticationType: API_KEY
      AdditionalAuthenticationProviders:
        - AuthenticationType: AMAZON_COGNITO_USER_POOLS
          UserPoolConfig:
            # AppIdClientRegex: !Sub "ecommerce-${Environment}-frontend-api.*"
            AwsRegion: !Ref AWS::Region
            UserPoolId: !Ref UserPoolId
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt ApiLoggingRole.Arn
        FieldLogLevel: ALL
      XrayEnabled: true

  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/appsync/apis/${Api.ApiId}"
      RetentionInDays: !Ref RetentionInDays

  ApiArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/frontend-api/api/arn
      Type: String
      Value: !GetAtt Api.Arn

  ApiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/frontend-api/api/id
      Type: String
      Value: !GetAtt Api.ApiId

  ApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/frontend-api/api/url
      Type: String
      Value: !GetAtt Api.GraphQLUrl

  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DefinitionS3Location: "resources/api.graphql"

  ############
  # PRODUCTS #
  ############
  ProductsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ProductsTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductsTableName}"
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductsTableName}/index/category"

  ProductsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name: ProductsTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt ProductsRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref ProductsTableName

  GetProductsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt ProductsDataSource.Name
      FieldName: getProducts
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          #if( $ctx.args.nextToken )
            "nextToken": "$ctx.args.nextToken",
          #end
          "limit": ${QueryLimit}
        }
      ResponseMappingTemplate: |
        {
          #if( $ctx.result.nextToken )
            "nextToken": "$ctx.result.nextToken"
          #end
          "products": $utils.toJson($ctx.result.items)
        }
  
  GetProductResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt ProductsDataSource.Name
      FieldName: getProduct
      TypeName: Query
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "productId": $util.dynamodb.toDynamoDBJson($ctx.args.productId)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  GetProductsByCategoryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt ProductsDataSource.Name
      FieldName: getProductsByCategory
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "category = :category",
            "expressionValues": {
              ":category": $util.dynamodb.toDynamoDBJson($ctx.args.category)
            }
          },
          "limit": ${QueryLimit},
          "index": "category"
        }
      ResponseMappingTemplate: |
        {
          #if( $ctx.result.nextToken )
            "nextToken": "$ctx.result.nextToken"
          #end
          "products": $utils.toJson($ctx.result.items)
        }
